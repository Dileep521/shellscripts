Shell : 

The shell provides you with an interface to the UNIX system.

It gathers input from you and executes programs based on that input. 

When a program finishes executing, it displays that program's output.

A shell is an environment in which we can run our commands, programs, and shell scripts. 

There are different flavors of shells, just as there are different flavors of operating systems. 

Each flavor of shell has its own set of recognized commands and functions

DOS = Command.com
Windows3.1/windows NT 3.x = program manager
Windows 95/98/ME/NT4/2000/XP = Windows Explorer

Types of Shell : 

K-Shell David Korn (not free)

C-Shell (Based on C-programming Language)

Bash = Bourne Again Shell.


#!/bin/sh
cd /home/ganesh/logfiles
rm program.log.6
mv program.log.5 program.log.6
mv program.log.4 program.log.5
mv program.log.3 program.log.4
mv program.log.2 program.log.3
mv program.log.1 program.log.2
mv program.log   program.log.1

#!/bin/bash
pwd
ls -c
date

#!/bin/bash
echo -n please enter your name:
read name
echo Hello $name How are you ?

#!/bin/bash
echo -n "please enter your name: "
read name
echo Hello $name.

touch askname ; echo ganesh > askname

ls userlist.txt xyz  > file 2>errors

ls userlist.txt xyz  > file 2>&1

============================================

sleep 1000

sleep 1000&



Program : 1

#
#	First, all possible users.  These are found in the file "/etc/passwd"
#
echo "Number of possible users on the system: \c"
cat /etc/passwd | wc -l

#
#	Next, all users currently logged in (using "who")
#
echo "Number of users logged onto the system: \c"
who | wc -l

#
#	Finally, the number of running processes (using "ps -e")
#
echo "Total number of processes running:      \c"
ps -e | wc -l


program : 2

#
#	First, the user's name
#
echo "Please enter your name: \c"
read name
echo Name: $name > details.out

#
#	Next, the user's address
#
echo "Please enter your address: \c"
read address
echo Address: $address >> details.out		# note: APPENDING!

#
#	Next, the user's phone number
#
echo "Please enter your phone number: \c"
read phone
echo Phone: $phone >> details.out

#
#	Finally, display the message about the filename
#
echo Thank you.  The details have been stored in the file \"details.out\"



=============================================

Special Characters :

&   *   ?  []  < > |  ( )  #  $  ^ =  '  " { } ; \

===============================================

echo the fee is $10

echo the fee is \$10

echo comments begin with a # character

echo "comments begin with a #character"

echo "the fee is \$10"

echo the fee is '$'10





Variables
The .profile or .bash_profile files in your home directory. These files are used to set environmental items for a users shell.
/etc/profile file is not very different however it is used to set system wide environmental variables on users shells.
/etc/profile.d
In addition to the setting environmental items the /etc/profile will execute the scripts within /etc/profile.d/*.sh. If you plan on setting your own system wide environmental variables it is recommended to place your configuration in a shell script within /etc/profile.d.

.bashrc file in your home directory. This file is meant for setting command aliases and functions used by bash shell users.
 The /etc/bashrc is setting command aliases  in system wide 


conditional code

True/false

ls
echo $? 
0
ls dd
echo $?
2
true
echo $?
0
false
echo $?
1


Conditional command execution

command1 && command2

command3 || command4

cp abc xyz && echo the file was copied okay (if the abc and xyz exists and then excute echo )

ls file2 || ls 

if the command exists error and then run the second command

IF STATEMENT

Syntax

if command1
 then
    command2
    command3
....
fi

example :


if diff file1 file2 > /dev/null
 then
    echo The files are the same
    rm file2
fi


Else clause:

if command1
then
one set of commands
else
another set of commands
fi


if the first set of commands exits non-zero then excute second set of commands

if the second set condition is met then close the loop



example:

if diff file1 file2 > /dev/null
 then
echo the files are the same
rm file2
else
echo the files are different!
echo please review the differences:
diff file1 file2
fi
else clause example 2 :

#!/bin/bash
if ls nofile > /dev/null
then
: # ":" is the "do nothing" command
else
echo the file does not exist --exiting...
exit
fi

elif syntax : 

if command1
then
command set 1
elif command2
then
command set 2
else
command set 3
fi

#!/bin/bash

read -p "Enter value of i :" i

if [ $i -eq 5 ]
then
    echo "Value of i is 5"
elif [ $i -eq 10 ]
then
    echo "Value of i is 10"
else
    echo "Value of i is not equal to 5 or 10"
fi
~

Comparisons statement

Test

var1=10
test $var1 = 20
echo $?

if test $var1 -gt $max
then
echo That value is too large 
fi

Test$var1 = 20

Spaces are must and should

Example

x=
test $x = 20
-bash: test: =: unary operator expected
test "$x" = 20

test -f /etc/passwd

echo $?

test -d .
echo $?

dir=/etc/garbage
test -d $dir
echo $?

test ! 

! = not

example

test ! -w /etc/passwd

echo $?

example of test :

#!/bin/bash
echo -n "please enter a filename: "
read fname
if test -z "$fname"
then
echo "you did not enter a filename"
elif test -f "$fname" -a -w "$fname"
then
echo "Every thing is fine"
else
echo "The file is not a writable file"
fi

here -a = and 

here -z = to check the file is exists or not 

test also have feature ( -o = or ) either of the condition 

Comparisons:
-eq	equal to
-ne	not equal to
-lt	less than
-le	less than or equal to
-gt	greater than
-ge	greater than or equal to

File Operations:
-s	file exists and is not empty
-f	file exists and is not a directory
-d	directory exists
-x	file is executable
-w	file is writable
-r	file is readable

test also can achive 

#!/bin/bash
echo -n "please enter a filename: "
read fname
if [ -z "$fname" ]
then
echo "you did not enter a filename"
elif [ -f "$fname" -a -w "$fname" ]
then
echo "Every thing is fine"
else
echo "The file is not a writable file"
fi


Case Statement

Syntax

if [ $var1 = val1 ]
then
code for case1
elif [ $var1 = val2 ]
then
code for case2
elif [ $var1 = val3 ]
then
code for case 3
elif [ $var1 = val4 ]
then

etc

#!/bin/bash

selection=
until [ "$selection" = "0" ]; do
    echo "
    PROGRAM MENU
    1 - Display free disk space
    2 - Display free memory
    3 - Display load on the server
    0 - exit program
"
    echo -n "Enter selection: "
    read selection
    echo ""
    case $selection in
        1 ) df ;;
        2 ) free ;;
        3 ) top ;;
        0 ) exit ;;
        * ) echo "Please enter 1, 2,3, or 0"
    esac
done




while syntax:

while command
do
code block
done

example : 1

#!/bin/bash
echo -n "Please enter your country name : "
read country
while [ "$country" != india  ]
do
echo "That answer is incorrect please enter again"
echo -n "Please enter your country name : "
read country
done
example :2
#!/bin/bash
echo -n "Please enter the name of a directory : "
read dir
while [ ! -d "$dir" ]
do
echo "$dir is not a directory"
echo -n "please try a again : "
read dir
done
echo congratulations : $dir is a directory!

 
Break and Continue

 










Numerical calculations

expr 1 + 2
expr 3 \* 4

example

#!/bin/bash
a=15
b=3
c=`expr $a / $b`
echo $c

For Loops

#!/bin/bash
for var1 in bread meat dairy vegetables fruit
do
echo one of the main food group is $var1
done

example:


